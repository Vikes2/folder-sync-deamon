{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"dest",
				"destPath"
			],
			[
				"copy",
				"copyFile"
			],
			[
				"sourc",
				"sourceDirectory"
			],
			[
				"open",
				"opendir"
			],
			[
				"exit",
				"EXIT_FAILURE"
			],
			[
				"C",
				"CFLAGS"
			],
			[
				"print",
				"printDirectoryContent"
			],
			[
				"d_",
				"d_name"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/time.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <dirent.h>\n#include <string.h>\n#include <unistd.h>\n#include <getopt.h>\n#include \"list.h\"\n#include \"sync.h\"\n#include \"copy.h\"\n\nint initParams(int argc, char** argv, char* source, char* destination, int* time, size_t* size, int* isRecursive);\n\nvoid printDirectoryContent(DIR *dir)\n{\n    struct dirent *entry;\n    while((entry = readdir(dir)) != NULL)\n    {\n        if(strcmp(entry->d_name, \".\") != 0 || strcmp(entry->d_name, \"..\") != 0) //xd\n        printf(\"%s -> %d\\n\", entry->d_name, entry->d_type);\n    }\n\n    copyDirectory\n}\n\n\n\nint initParams(int argc, char** argv, char* source, char* destination, int* time, size_t* size, int* isRecursive)\n{\n    int opt;\n\n    source = argv[1];\n    destination = argv[2];\n\n    if(argc < 3) //at least 3 arguments are necessary, e.g. ./sync source destination \n    {\n        fprintf(stderr, \"Usage: %s source destination [-t secs] [-s size] [-R]\\n\", argv[0]);\n        exit(EXIT_FAILURE);\n    }\n\n    if(strcmp(source, destination) == 0) // source and destination have to be different directories\n    {\n        fprintf(stderr, \"Source and destination paths are the same\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    while ((opt = getopt(argc, argv, \"t:s:R\")) != -1)\n    {\n        switch(opt)\n        {\n            case 't':\n                *time = atoi(optarg);\n                break;\n            case 's':\n                *size = atoi(optarg);\n                break;\n            case 'R':\n                *isRecursive = 1;\n                break;\n            default: /* '?' */\n                fprintf(stderr, \"Usage: %s source destination [-t secs] [-s size] [-R]\\n\", argv[0]);\n                exit(EXIT_FAILURE);\n        }\n    }\n\n    return optind;\n}\n\nint main(int argc, char** argv)\n{\n\n\n    char* sourceDirPath = argv[1];\n    char* destinationDirPath = argv[2];\n    int time = 300;\n    size_t sizeTH = 1073741824;\n    int isRecursive = 0;\n\n    if(initParams(argc, argv, sourceDirPath, destinationDirPath, &time, &sizeTH, &isRecursive) >= argc)\n    {\n       fprintf(stderr, \"Expected argument after options\\n\");\n       exit(EXIT_FAILURE);\n    }\n\n    copyDirectory(\"a\", \"c\");\n\n    if(isRecursive == 0)\n    {\n        if(syncFiles(sourceDirPath, destinationDirPath, sizeTH) == 0)\n        {\n            return 1;\n        }\n    }\n    else\n    {\n        return 1;\n    }\n\n    /*\n    DIR *source = opendir(sourceDirName);\n    DIR *dest = opendir(destinationDirName);\n\n    List * list = emptylist();\n\n    loadData(list, source);\n    display(list);\n    destroy(list);\n    */\n\n    #pragma region  Directory verification\n    /**\n     \n     * Weryfikacja katalogÃ³w\n    \n    if(!source)\n    {\n        perror(sourceDirName);\n        return 1;\n    }\n\n    if(!dest)\n    {\n        perror(destinationDirName);\n        return 1;\n    }\n\n    */\n    #pragma endregion comment\n\n    #pragma region Linked list testing\n\n    // List * list = emptylist();\n    // add(\"aaa\",1,list);\n    // add(\"bbb\",2,list);\n    // add(\"ccc\",3,list);\n    // add(\"ddd\",4,list);\n    // add(\"eee\",5,list);\n    // add(\"fff\",6,list);\n\n    // printf(\"\\n\");\n    \n    // display(list);\n    // printf(\"\\n\");\n    // deleteElement(\"ccaa\",list);\n    // display(list);\n    // printf(\"\\n\");\n\n    // Node * element ;\n    // element = popElement(list);\n    // printf(\"%s \", element->fileName);\n\n    // free(element);\n\n    // display(list);\n    // printf(\"\\n\");\n\n    #pragma endregion\n\n   // printDirectoryContent(source);\n\n    //closedir(source);\n    //closedir(dest);\n    return 0;\n}   \n",
			"file": "main.c",
			"file_size": 3558,
			"file_write_time": 131674054237956827,
			"settings":
			{
				"buffer_size": 3576,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"sync.h\"\n\n\nvoid loadData(List * list, DIR * dir);\nint compare(char* sourceDirPath, char* destinationDirPath, Node* element, List * list);\nvoid loadData(List * list, DIR * dir)\n{\n    struct dirent *entry;\n    while((entry = readdir(dir)) != NULL)\n    {\n        if(strcmp(entry->d_name, \".\") != 0 && strcmp(entry->d_name, \"..\") != 0)\n        {\n          add(entry->d_name, entry->d_type, list);\n        }\n    }\n}\n\nchar* mergeStrings(char* string1, char* string2)\n{\n    char* result = (char *) malloc(2+ strlen(string1) + strlen(string2));\n    strcpy(result,string1);\n    strcat(result,\"/\");\n    strcat(result,string2);\n    printf(\"%s\",result);\n    return result;\n}\n\nint compare(char* sourceDirPath, char* destinationDirPath, Node* element, List * list)\n{\n    //return: 0 the same, 1 diffrent, -1 no file\n    if(valueExists(element->fileName,element->fileType,list) ==0)\n    {\n        return 1;\n    }\n    struct stat sb;\n    struct stat db;\n    char* pathSource = mergeStrings(sourceDirPath,element->fileName);\n    char* pathDestination = mergeStrings(destinationDirPath,element->fileName);\n\n    if(stat(pathSource,&sb) == 0)\n    {\n        if(stat(pathDestination,&db) == 0)\n        {\n            if(sb.st_mtime == db.st_mtime)\n            {\n                return 0;\n            }else\n            {\n                return 1;\n            }\n        }\n        else\n        {\n            if(errno == ENOENT)\n            {\n                // nie ma pliku w dest\n                return -1;\n            }\n        }\n    }\n    else\n    {\n        exit(EXIT_FAILURE);\n    }\n\n\n   \n}\n\nint syncFiles(char* sourceDirPath, char* destinationDirPath, size_t sizeTH)\n{\n\tDIR *source = opendir(sourceDirPath);\n    DIR *dest = opendir(destinationDirPath);\n\n    List * listS = emptylist();\n    List * listD = emptylist();\n\n    loadData(listS, source);\n    loadData(listD, dest);\n\n    if(listS == NULL && listD == NULL)\n        return 0;\n\n    display(listS);\n    printf(\"\\n\");\n    display(listD);\n\n    Node * current;\n\n    while(listS != NULL)\n    {\n        current = popElement(listS);\n        int compareStatus = compare(sourceDirPath,destinationDirPath,current, listD);\n        if( compareStatus == 0)\n        {\n            //object the same\n\n            deleteElement(current->fileName,listD);\n            continue;\n        }else if (compareStatus == -1)\n        {\n            //nie ma pliku w dest\n            if(current->fileType == 4) //if(directory)\n            {\n                if(1)//if(isRecursive)\n                {\n                    //copy all\n                }else\n                {\n                    continue;\n                }\n\n            }else\n            {\n                //copy file\n            }\n\n        }else\n        {\n            //pliki sa rozne\n            printf(\"\\nnie=\");\n        }\n    }\n\n\n\n   \n\n\n    destroy(listS);\n    destroy(listD);\n\n    closedir(source);\n    closedir(dest);\n\n    return 0;\n}\n\nint syncRecursive(char* sourceDirPath, char* destinationDirPath, size_t sizeTH)\n{\n\n}",
			"file": "sync.c",
			"file_size": 3004,
			"file_write_time": 131674146669905770,
			"settings":
			{
				"buffer_size": 3000,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef LIST_H\n#define LIST_H\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\ntypedef struct node \n{\n  char* fileName;\n  int fileType;\n  struct node * next;\n} Node;\n\ntypedef struct list \n{\n  Node * head; \n} List;\n\nList * emptylist();\n\n/**\n * [add description]\n * Adds new element to the specific list.\n * \n * @param {char *} _fileName test1\n * @param {int} _fileType test2\n * @param {List *} list test3\n */\nvoid add(char* _fileName, int _fileType, List * list);\n\nint valueExists(char* _fileName, int _fileType, List * list);\n\nvoid display(List * list);\nvoid deleteElement(char* _fileName, List* list);\nNode * popElement(List * list);\n\nvoid destroy(List * list);\n\n#endif",
			"file": "list.h",
			"file_size": 643,
			"file_write_time": 131674157379068395,
			"settings":
			{
				"buffer_size": 681,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "list.c",
			"settings":
			{
				"buffer_size": 2356,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pa",
		"selected_items":
		[
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"termin",
				"Terminal: Open in project folder"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 497.0
	},
	"console":
	{
		"height": 143.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/wojtek/Pulpit/folder-sync-deamon",
		"/home/wojtek/Pulpit/folder-sync-deamon/obj",
		"/home/wojtek/Pulpit/folder-sync-deamon/src"
	],
	"file_history":
	[
		"/home/wojtek/Pulpit/folder-sync-deamon/src/copy.h",
		"/home/wojtek/Pulpit/folder-sync-deamon/src/copy.c",
		"/home/wojtek/Pulpit/folder-sync-deamon/src/list.c",
		"/home/wojtek/Pulpit/folder-sync-deamon/src/list.h",
		"/home/wojtek/Pulpit/folder-sync-deamon/src/sync.h",
		"/home/wojtek/Pulpit/folder-sync-deamon/src/main.c",
		"/home/wojtek/Pulpit/folder-sync-deamon/src/sync.c",
		"/home/wojtek/Pulpit/folder-sync-deamon/Makefile",
		"/home/wojtek/Pulpit/folder-sync-deamon/test/.gitkeep",
		"/home/wojtek/Pulpit/folder-sync-deamon/makefile1",
		"/home/wojtek/Pulpit/folder-sync-deamon/obj/sync.d",
		"/home/wojtek/Pulpit/folder-sync-deamon/obj/main.d",
		"/home/wojtek/Pulpit/folder-sync-deamon/obj/list.d"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3576,
						"regions":
						{
						},
						"selection":
						[
							[
								639,
								639
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "sync.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3000,
						"regions":
						{
						},
						"selection":
						[
							[
								350,
								350
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "list.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 681,
						"regions":
						{
						},
						"selection":
						[
							[
								317,
								317
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "list.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2356,
						"regions":
						{
						},
						"selection":
						[
							[
								698,
								698
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 147.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 37.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 114.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "/home/wojtek/Pulpit/folder-sync-deamon/folder-sync-deamon.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
